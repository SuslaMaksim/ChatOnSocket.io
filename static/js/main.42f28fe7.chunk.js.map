{"version":3,"sources":["Socket.js","Reducer.js","JoinBlock.js","User.js","Letter.js","Form.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","reducer","state","action","type","isAuth","userName","payload","name","roomId","users","messages","useStyles","makeStyles","theme","container","display","width","marginTop","flexDirection","alignItems","padding","border","borderRadius","textField","marginBottom","rules","JoinBlock","login","classes","useState","setRooms","setName","error","setError","Box","component","className","Typography","style","color","variant","TextField","onChange","e","target","value","label","Button","onClick","axios","post","then","res","fullWidth","listItem","backgroundColor","cursor","User","ListItem","ListItemAvatar","Avatar","ListItemText","primary","letterBox","justifyContent","letter","position","wordBreak","marginRight","nameLetter","right","bottom","fontSize","Letter","text","form","button","margin","Form","addMessage","message","setMessage","placeholder","rows","multiline","buttonContainer","chatContainer","overflow","usersContainer","messageContainer","minHeight","list","letterContainer","maxHeight","hr","Chat","messagesRef","useRef","useEffect","current","scrollTo","Grid","direction","item","md","sm","xs","align","length","List","map","index","justify","ref","formContainer","emit","App","useReducer","dispatch","setUsers","dataUsers","dataMessages","on","a","get","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.42f28fe7.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\n\r\nconst socket = io('https://shrouded-journey-95175.herokuapp.com/');\r\n\r\nexport default socket;","\r\nexport const reducer = (state,action)=>{\r\n    switch (action.type){\r\n        case 'IS_AUTH':\r\n            return {\r\n                ...state,\r\n                isAuth: true,\r\n                userName: action.payload.name,\r\n                roomId: action.payload.roomId\r\n            };\r\n\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.payload\r\n            };\r\n        case 'SET_DATA':\r\n            return {\r\n                ...state,\r\n                users: action.payload.users,\r\n                messages: action.payload.messages\r\n            };\r\n        case 'SET_MESSAGES':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages,action.payload]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}","import React,{useState} from 'react';\r\nimport axios from 'axios';\r\nimport socket from './Socket'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Box,Typography} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container:{\r\n        display: 'flex',\r\n        width: '300px',\r\n        marginTop: '50px',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        padding: '20px',\r\n        border: '1px solid grey',\r\n        borderRadius: '3px',\r\n    },\r\n    textField:{\r\n        width: '100%',\r\n        marginBottom: '20px'\r\n\r\n    },\r\n    rules: {\r\n        marginBottom: '15px'\r\n    }\r\n\r\n}));\r\n\r\n\r\nconst JoinBlock = ({login})=> {\r\n    const classes = useStyles()\r\n\r\n    const[roomId,setRooms] = useState('');\r\n    const[name,setName] = useState('');\r\n    const[error,setError] = useState(false);\r\n\r\n   const postData = ()=>{\r\n        if(!roomId || !name)\r\n            return setError(true)\r\n       axios.post('https://shrouded-journey-95175.herokuapp.com/rooms',{\r\n           name,roomId\r\n       }).then( res => {\r\n          setRooms('')\r\n          setName('')\r\n          login({name,roomId})\r\n\r\n\r\n       })\r\n       setError(false)\r\n    }\r\n\r\n    return (\r\n        <Box component='form' className={classes.container}>\r\n            {error && <Typography style={{color: 'tomato',marginBottom:'15px'}} variant='body2'>Заполните оба поля ввода</Typography>}\r\n            <TextField onChange={ e => setRooms(e.target.value)} className={classes.textField} variant='outlined' label='Room' value={roomId} />\r\n            <TextField onChange={ e => setName(e.target.value)}  className={classes.textField} variant='outlined' label='Name' value={name}/>\r\n            <Button onClick={postData} style={{width: '100px',marginBottom: '50px'}} variant='outlined' color='secondary' fullWidth={false}> Join</Button>\r\n\r\n            <Typography variant='body1' className={classes.rules}> How to use this chat ? :)</Typography>\r\n            <Typography variant='body1' className={classes.rules}> Step 1: User1 enter username in input's name, and enter number of room in the input's room </Typography>\r\n            <Typography variant='body1' className={classes.rules}> Step 2: User2 also enter username in input's name, and enter the same number of room in the input's room </Typography>\r\n            <Typography variant='body1' className={classes.rules}> Step 3: User1 and User2 can chat </Typography>\r\n        </Box>\r\n\r\n    );\r\n}\r\n\r\nexport default JoinBlock ;\r\n","import {Avatar, List, ListItem, ListItemAvatar, ListItemText} from \"@material-ui/core\";\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    listItem:{\r\n        backgroundColor: 'white',\r\n        borderRadius: '5px',\r\n        marginBottom: '10px',\r\n        cursor: 'pointer',\r\n        '&:last-Child':{\r\n            marginBottom: '0px'\r\n        }\r\n    }\r\n}))\r\n\r\nconst User = ({name})=>{\r\n     const classes = useStyles()\r\n    return(\r\n        <ListItem className={classes.listItem}>\r\n            <ListItemAvatar >\r\n                <Avatar>\r\n                    <ImageIcon />\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={name} />\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default User;\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    letterBox:{\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        marginBottom: \"30px\",\r\n\r\n    },\r\n    letter:{\r\n        padding: '5px 10px',\r\n        backgroundColor: '#66b3ff',\r\n        color: 'white',\r\n        borderRadius: '12px',\r\n        position: 'relative',\r\n        wordBreak: 'break-word',\r\n        marginRight: '20px'\r\n\r\n    },\r\n    nameLetter: {\r\n        position: 'absolute',\r\n        backgroundColor: '#944dff',\r\n        right: '-10px',\r\n        bottom: '-15px',\r\n        borderRadius: '8px',\r\n        padding: '2px 5px',\r\n        fontSize: '10px',\r\n    }\r\n}))\r\n\r\n\r\n\r\n\r\nconst Letter = ({text,name})=>{\r\n    const classes = useStyles()\r\n    return(\r\n\r\n        <Box component='div' className={classes.letterBox}>\r\n            <Typography className={classes.letter}>{text}\r\n                <Box component='span' className={classes.nameLetter}>{name}</Box>\r\n            </Typography>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Letter;","\r\nimport React, {useState} from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    form:{\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    button: {\r\n        backgroundColor: '#33ccff',\r\n        margin: '20px 10px 0px 0px',\r\n        padding: '5px 10px',\r\n        color: 'white',\r\n        \"&:hover\":{\r\n            backgroundColor: '#33ccff'\r\n        }\r\n    }\r\n\r\n\r\n}))\r\n\r\nconst Form = ({addMessage})=>{\r\n    const classes = useStyles();\r\n    let[message,setMessage] = useState('')\r\n\r\n    let setMessageToServer =()=>{\r\n        addMessage(message)\r\n        setMessage('')\r\n    }\r\n\r\n    return(\r\n        <Box component='form' className={classes.form}>\r\n            <TextField\r\n                value = {message}\r\n                onChange={e => setMessage(e.target.value)}\r\n                placeholder=\"Enter Messagee\"\r\n                rows={4}\r\n                multiline\r\n                variant=\"outlined\"\r\n            />\r\n            <Box component='div' className={classes.buttonContainer}>\r\n                <Button onClick={setMessageToServer} className={classes.button}> Send</Button>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React,{useEffect,useRef} from 'react';\r\nimport socket from './Socket';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {List} from \"@material-ui/core\";\r\nimport User from './User';\r\nimport Letter from \"./Letter\";\r\nimport Form from \"./Form\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    chatContainer: {\r\n        display: 'flex',\r\n        width: '800px',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        border: '1px solid grey',\r\n        borderRadius: '6px',\r\n        overflow: 'hidden'\r\n    },\r\n    usersContainer:{\r\n        backgroundColor: ' #f2f2f2',\r\n        padding: '10px',\r\n\r\n    },\r\n    messageContainer:{\r\n        backgroundColor: ' white',\r\n        padding: '10px',\r\n        minHeight: '500px',\r\n    },\r\n    list:{\r\n        width: '100%'\r\n    },\r\n    letterContainer:{\r\n        maxHeight: '250px',\r\n        overflow: 'auto'\r\n    },\r\n    hr: {\r\n        marginBottom: '20px',\r\n        border: '1px solid #f2f2f2'\r\n    }\r\n}))\r\n\r\nconst Chat = ({users,messages,userName,roomId,setMessage})=>{\r\n    let classes = useStyles();\r\n\r\n    const messagesRef = useRef(null);\r\n\r\n    useEffect(()=>{\r\n        messagesRef.current.scrollTo(0,99999)\r\n    },[messages])\r\n\r\n    let addMessage = (message)=>{\r\n        socket.emit('ROOM:SET_MESSAGE',{message,userName,roomId});\r\n        setMessage({message,userName});\r\n    }\r\n\r\n    return(\r\n\r\n        <Box className={classes.chatContainer}>\r\n\r\n            <Grid container >\r\n                <Grid container direction='column' item md={4} sm={4} xs={12} className={classes.usersContainer}>\r\n                    <Typography align='center' variant='h6'> ROOM №: ({roomId})</Typography>\r\n                    <Typography variant='h6'> Online: ({users.length})</Typography>\r\n                    <List className={classes.list}>\r\n                        {!users ? null : users.map( (name,index) => <User name = {name} key = {index}/>)}\r\n                    </List>\r\n                </Grid>\r\n                <Grid container direction='column' justify='space-between' item md={8} sm={8} xs={12}  className={classes.messageContainer}>\r\n                    <Box component='div' className={classes.letterContainer} ref = {messagesRef}>\r\n                        {!messages ? null : messages.map( (item,index)  => <Letter name = {item.userName} key = {index} text = {item.message}/>)}\r\n                    </Box>\r\n                    <Box component='div' className={classes.formContainer}>\r\n                        <hr className={classes.hr} />\r\n                        <Form addMessage={addMessage}/>\r\n                    </Box>\r\n               </Grid>\r\n\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\nexport default Chat;","import React,{useReducer,useEffect} from 'react';\nimport axios from 'axios';\nimport socket from './Socket';\nimport {reducer} from './Reducer';\nimport JoinBlock from \"./JoinBlock\";\nimport Chat from './Chat'\n\nfunction App() {\n    const[state,dispatch] =useReducer(reducer,{\n        isAuth: false,\n        users: [],\n        messages: [],\n        userName: '',\n        roomId: null\n    })\n\n    const setUsers = (dataUsers)=>{\n        dispatch({\n            type: 'SET_USERS',\n            payload: dataUsers\n        })\n    }\n    const setMessage = (dataMessages)=>{\n        dispatch({\n            type: 'SET_MESSAGES',\n            payload: dataMessages\n        })\n\n    }\n\n    useEffect(()=>{\n        socket.on('ROOM:JOINED',(dataUsers)=> setUsers(dataUsers));\n        socket.on('ROOM:DISCONNECT_USER',(dataUsers)=> setUsers(dataUsers));\n        socket.on('ROOM:ADD_MESSAGE',(dataMessages)=> setMessage(dataMessages));\n\n    },[])\n\n    const login = async (payload)=>{\n        dispatch({\n            type: 'IS_AUTH',\n            payload\n        })\n        socket.emit('ROOM:JOIN',payload);\n        const {data} = await axios.get(`https://shrouded-journey-95175.herokuapp.com/rooms/${payload.roomId}`)\n        dispatch({\n            type: 'SET_DATA',\n            payload: data\n        })\n\n\n\n    }\n\n  return (\n    <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%',minHeight: '600px'}} >\n         {!state.isAuth ? <JoinBlock login = {login}/> : <Chat {...state} setMessage={setMessage} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}